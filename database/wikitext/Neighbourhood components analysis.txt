Neighbourhood components analysis is a supervised learning method for classifying multivariate data into distinct classes according to a given distance metric over the data. Functionally, it serves the same purposes as the K-nearest neighbors algorithm, and makes direct use of a related concept termed stochastic nearest neighbours.


== Definition ==
Neighbourhood components analysis aims at "learning" a distance metric by finding a linear transformation of input data such that the average leave-one-out (LOO) classification performance is maximized in the transformed space. The key insight to the algorithm is that a matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   corresponding to the transformation can be found by defining a differentiable objective function for 
  
    
      
        A
      
    
    {\displaystyle A}
  , followed by the use of an iterative solver such as conjugate gradient descent. One of the benefits of this algorithm is that the number of classes 
  
    
      
        k
      
    
    {\displaystyle k}
   can be determined as a function of 
  
    
      
        A
      
    
    {\displaystyle A}
  , up to a scalar constant. This use of the algorithm, therefore, addresses the issue of model selection.


== Explanation ==
In order to define 
  
    
      
        A
      
    
    {\displaystyle A}
  , we define an objective function describing classification accuracy in the transformed space and try to determine 
  
    
      
        
          A
          
            ∗
          
        
      
    
    {\displaystyle A^{*}}
   such that this objective function is maximized.

  
    
      
        
          A
          
            ∗
          
        
        =
        
          
            
              argmax
            
          
          
            A
          
        
        f
        (
        A
        )
      
    
    {\displaystyle A^{*}={\mbox{argmax}}_{A}f(A)}
  


=== Leave-one-out (LOO) classification ===
Consider predicting the class label of a single data point by consensus of its 
  
    
      
        k
      
    
    {\displaystyle k}
  -nearest neighbours with a given distance metric. This is known as leave-one-out classification. However, the set of nearest-neighbours 
  
    
      
        
          C
          
            i
          
        
      
    
    {\displaystyle C_{i}}
   can be quite different after passing all the points through a linear transformation. Specifically, the set of neighbours for a point can undergo discrete changes in response to smooth changes in the elements of 
  
    
      
        A
      
    
    {\displaystyle A}
  , implying that any objective function 
  
    
      
        f
        (
        ⋅
        )
      
    
    {\displaystyle f(\cdot )}
   based on the neighbours of a point will be piecewise-constant, and hence not differentiable.


=== Solution ===
We can resolve this difficulty by using an approach inspired by stochastic gradient descent. Rather than considering the 
  
    
      
        k
      
    
    {\displaystyle k}
  -nearest neighbours at each transformed point in LOO-classification, we'll consider the entire transformed data set as stochastic nearest neighbours. We define these using a softmax function of the squared Euclidean distance between a given LOO-classification point and each other point in the transformed space:

  
    
      
        
          p
          
            i
            j
          
        
        =
        
          
            {
            
              
                
                  
                    
                      
                        e
                        
                          −
                          
                            |
                          
                          
                            |
                          
                          A
                          
                            x
                            
                              i
                            
                          
                          −
                          A
                          
                            x
                            
                              j
                            
                          
                          
                            |
                          
                          
                            
                              |
                            
                            
                              2
                            
                          
                        
                      
                      
                        
                          ∑
                          
                            k
                            ≠
                            i
                          
                        
                        
                          e
                          
                            −
                            
                              |
                            
                            
                              |
                            
                            A
                            
                              x
                              
                                i
                              
                            
                            −
                            A
                            
                              x
                              
                                k
                              
                            
                            
                              |
                            
                            
                              
                                |
                              
                              
                                2
                              
                            
                          
                        
                      
                    
                  
                  ,
                
                
                  
                    
                      if
                    
                  
                  j
                  ≠
                  i
                
              
              
                
                  0
                  ,
                
                
                  
                    
                      if
                    
                  
                  j
                  =
                  i
                
              
            
            
          
        
      
    
    {\displaystyle p_{ij}={\begin{cases}{\frac {e^{-||Ax_{i}-Ax_{j}||^{2}}}{\sum _{k\neq i}e^{-||Ax_{i}-Ax_{k}||^{2}}}},&{\mbox{if}}j\neq i\\0,&{\mbox{if}}j=i\end{cases}}}
  
The probability of correctly classifying data point 
  
    
      
        i
      
    
    {\displaystyle i}
   is the probability of classifying the points of each of its neighbours with the same class 
  
    
      
        
          C
          
            i
          
        
      
    
    {\displaystyle C_{i}}
  :

  
    
      
        
          p
          
            i
          
        
        =
        
          ∑
          
            j
            ∈
            
              C
              
                i
              
            
          
        
        
          p
          
            i
            j
          
        
        
      
    
    {\displaystyle p_{i}=\sum _{j\in C_{i}}p_{ij}\quad }
   where 
  
    
      
        
          p
          
            i
            j
          
        
      
    
    {\displaystyle p_{ij}}
   is the probability of classifying neighbour 
  
    
      
        j
      
    
    {\displaystyle j}
   of point 
  
    
      
        i
      
    
    {\displaystyle i}
  .
Define the objective function using LOO classification, this time using the entire data set as stochastic nearest neighbours:

  
    
      
        f
        (
        A
        )
        =
        
          ∑
          
            i
          
        
        
          ∑
          
            j
            ∈
            
              C
              
                i
              
            
          
        
        
          p
          
            i
            j
          
        
        =
        
          ∑
          
            i
          
        
        
          p
          
            i
          
        
      
    
    {\displaystyle f(A)=\sum _{i}\sum _{j\in C_{i}}p_{ij}=\sum _{i}p_{i}}
  
Note that under stochastic nearest neighbours, the consensus class for a single point 
  
    
      
        i
      
    
    {\displaystyle i}
   is the expected value of a point's class in the limit of an infinite number of samples drawn from the distribution over its neighbours 
  
    
      
        j
        ∈
        
          C
          
            i
          
        
      
    
    {\displaystyle j\in C_{i}}
   i.e.: 
  
    
      
        P
        (
        C
        l
        a
        s
        s
        (
        
          X
          
            i
          
        
        )
        =
        C
        l
        a
        s
        s
        (
        
          X
          
            j
          
        
        )
        )
        =
        
          p
          
            i
            j
          
        
      
    
    {\displaystyle P(Class(X_{i})=Class(X_{j}))=p_{ij}}
  . Thus the predicted class is an affine combination of the classes of every other point, weighted by the softmax function for each 
  
    
      
        j
        ∈
        
          C
          
            j
          
        
      
    
    {\displaystyle j\in C_{j}}
   where 
  
    
      
        
          C
          
            j
          
        
      
    
    {\displaystyle C_{j}}
   is now the entire transformed data set.
This choice of objective function is preferable as it is differentiable with respect to 
  
    
      
        A
      
    
    {\displaystyle A}
   (denote 
  
    
      
        
          x
          
            i
            j
          
        
        =
        
          x
          
            i
          
        
        −
        
          x
          
            j
          
        
      
    
    {\displaystyle x_{ij}=x_{i}-x_{j}}
  ):

  
    
      
        
          
            
              ∂
              f
            
            
              ∂
              A
            
          
        
        =
        −
        2
        A
        
          ∑
          
            i
          
        
        
          ∑
          
            j
            ∈
            
              C
              
                i
              
            
          
        
        
          p
          
            i
            j
          
        
        
          (
          
            
              x
              
                i
                j
              
            
            
              x
              
                i
                j
              
              
                T
              
            
            −
            
              ∑
              
                k
              
            
            
              p
              
                i
                k
              
            
            
              x
              
                i
                k
              
            
            
              x
              
                i
                k
              
              
                T
              
            
          
          )
        
      
    
    {\displaystyle {\frac {\partial f}{\partial A}}=-2A\sum _{i}\sum _{j\in C_{i}}p_{ij}\left(x_{ij}x_{ij}^{T}-\sum _{k}p_{ik}x_{ik}x_{ik}^{T}\right)}
  

  
    
      
        =
        2
        A
        
          ∑
          
            i
          
        
        
          (
          
            
              p
              
                i
              
            
            
              ∑
              
                k
              
            
            
              p
              
                i
                k
              
            
            
              x
              
                i
                k
              
            
            
              x
              
                i
                k
              
              
                T
              
            
            −
            
              ∑
              
                j
                ∈
                
                  C
                  
                    i
                  
                
              
            
            
              p
              
                i
                j
              
            
            
              x
              
                i
                j
              
            
            
              x
              
                i
                j
              
              
                T
              
            
          
          )
        
      
    
    {\displaystyle =2A\sum _{i}\left(p_{i}\sum _{k}p_{ik}x_{ik}x_{ik}^{T}-\sum _{j\in C_{i}}p_{ij}x_{ij}x_{ij}^{T}\right)}
  
Obtaining a gradient for 
  
    
      
        A
      
    
    {\displaystyle A}
   means that it can be found with an iterative solver such as conjugate gradient descent. Note that in practice, most of the innermost terms of the gradient evaluate to insignificant contributions due to the rapidly diminishing contribution of distant points from the point of interest. This means that the inner sum of the gradient can be truncated, resulting in reasonable computation times even for large data sets.


=== Alternative formulation ===
"Maximizing 
  
    
      
        f
        (
        ⋅
        )
      
    
    {\displaystyle f(\cdot )}
   is equivalent to minimizing the 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  -distance between the predicted class distribution and the true class distribution (ie: where the 
  
    
      
        
          p
          
            i
          
        
      
    
    {\displaystyle p_{i}}
   induced by 
  
    
      
        A
      
    
    {\displaystyle A}
   are all equal to 1). A natural alternative is the KL-divergence, which induces the following objective function and gradient:" (Goldberger 2005)

  
    
      
        g
        (
        A
        )
        =
        
          ∑
          
            i
          
        
        log
        ⁡
        
          (
          
            
              ∑
              
                j
                ∈
                
                  C
                  
                    i
                  
                
              
            
            
              p
              
                i
                j
              
            
          
          )
        
        =
        
          ∑
          
            i
          
        
        log
        ⁡
        (
        
          p
          
            i
          
        
        )
      
    
    {\displaystyle g(A)=\sum _{i}\log \left(\sum _{j\in C_{i}}p_{ij}\right)=\sum _{i}\log(p_{i})}
  

  
    
      
        
          
            
              ∂
              g
            
            
              ∂
              A
            
          
        
        =
        2
        A
        
          ∑
          
            i
          
        
        
          (
          
            
              ∑
              
                k
              
            
            
              p
              
                i
                k
              
            
            
              x
              
                i
                k
              
            
            
              x
              
                i
                k
              
              
                T
              
            
            −
            
              
                
                  
                    ∑
                    
                      j
                      ∈
                      
                        C
                        
                          i
                        
                      
                    
                  
                  
                    p
                    
                      i
                      j
                    
                  
                  
                    x
                    
                      i
                      j
                    
                  
                  
                    x
                    
                      i
                      j
                    
                    
                      T
                    
                  
                
                
                  
                    ∑
                    
                      j
                      ∈
                      
                        C
                        
                          i
                        
                      
                    
                  
                  
                    p
                    
                      i
                      j
                    
                  
                
              
            
          
          )
        
      
    
    {\displaystyle {\frac {\partial g}{\partial A}}=2A\sum _{i}\left(\sum _{k}p_{ik}x_{ik}x_{ik}^{T}-{\frac {\sum _{j\in C_{i}}p_{ij}x_{ij}x_{ij}^{T}}{\sum _{j\in C_{i}}p_{ij}}}\right)}
  
In practice, optimization of 
  
    
      
        A
      
    
    {\displaystyle A}
   using this function tends to give similar performance results as with the original.


== History and background ==
Neighbourhood components analysis was developed by Jacob Goldberger, Sam Roweis, Ruslan Salakhudinov, and Geoff Hinton at the University of Toronto's department of computer science in 2004.


== See also ==
Spectral clustering
Large margin nearest neighbor


== References ==
J. Goldberger, G. Hinton, S. Roweis, R. Salakhutdinov. (2005) Neighbourhood Components Analysis. Advances in Neural Information Processing Systems. 17, 513–520, 2005.


== External links ==


=== Software ===
The MLPACK library contains a C++ implementation
nca (C++)
scikit-learn's "NeighborhoodComponentsAnalysis" implementation (Python)